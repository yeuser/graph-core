buildscript {
    ext.kotlin_version = '1.3.71'

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

group = 'me.graph'
version = '0.2.0'

ext {
    java_version = 1.8
}

apply plugin: 'kotlin'
apply plugin: 'java'

sourceCompatibility = java_version

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

repositories {
    jcenter()
    mavenCentral()
}

configurations {
    ktlint
}

dependencies {
    ktlint "com.pinterest:ktlint:0.36.0"
    implementation group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-jdk8', version: '1.1.0-alpha'

    implementation group: 'com.google.guava', name: 'guava', version: '26.0-jre'
//    implementation group: 'com.carrotsearch', name: 'hppc', version: '0.8.1'
//    implementation group: 'net.sf.trove4j', name: 'trove4j', version: '3.0.3'
    implementation group: 'it.unimi.dsi', name: 'fastutil', version: '8.2.2'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    testImplementation group: 'junit', name: 'junit', version: '4.12'
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args "src/**/*.kt"
    // to generate report in checkstyle format prepend following args:
    // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    // see https://github.com/pinterest/ktlint#usage for more
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args "-F", "src/**/*.kt"
}

compileKotlin {
    kotlinOptions {
        jvmTarget = java_version
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = java_version
    }
}

jar {
    doFirst {
        manifest {
            attributes(
                    "Implementation-Title": "${project.name}",
                    "Implementation-Version": version
            )
        }
    }
}

manifest {
    attributes 'provider': 'gradle'
}
configurations {
    published
}
task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    published sourceJar
    published javadocJar
}